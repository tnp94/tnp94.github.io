{"version":3,"sources":["logo.svg","components/Header.jsx","components/Navbar.jsx","components/Projects/HexDots/src/classes/SelectedStack.js","components/Projects/HexDots/src/classes/Dot.js","components/Projects/HexDots/src/scenes/GameScene.js","components/Projects.jsx","components/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","alt","height","React","Component","Navbar","href","SelectedStack","scene","this","currentRow","currentColumn","currentColor","stack","loop","path","lines","graphics","add","dot","last","length","penultimate","push","color","column","row","AreAdjacent","indexOf","fillColor","pop","console","log","score","points","popDot","clear","lastDot","input","activePointer","depth","lineStyle","Phaser","Curves","Path","x","y","i","lineTo","draw","Dot","radius","targetX","targetY","setInteractive","on","pointer","isDown","selectedStack","selectDot","scale","tweens","targets","duration","ease","delay","existing","particles","emitter","createEmitter","setPosition","setSpeed","min","max","setBlendMode","BlendModes","NORMAL","setFrequency","setLifespan","setScale","setGravity","explode","gameboard","destroy","newRow","timeline","createTimeline","play","GameObjects","Arc","GameScene","game","boardSize","colorCount","hexWidth","hexHeight","showHexes","colorList","Math","boardsize","colorIndex","floor","random","dot1","dot2","abs","load","html","image","scoreText","text","fontSize","fill","thisScene","clearColor","j","boardoffsetX","sys","config","width","boardoffsetY","scoreStack","loopScore","setText","fallDots","refillDots","gamerow","RandomColor","positionX","positionY","hex","alpha","columnPoints","c","r","columnPoint","updateLine","victimRow","victimDot","fall","refresh","Scene","ProjectList","match","useRouteMatch","ClearProject","Project","project","document","getElementById","children","remove","projectId","useParams","urlParams","URLSearchParams","window","location","search","boardSizeInput","get","colorCountInput","parseInt","gameScene","parent","type","AUTO","pixelArt","border","backgroundColor","Game","start","htmlFor","placeholder","name","id","onChange","onClick","value","Projects","to","Home","App","rel","integrity","crossOrigin","basename","process","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.9ce5ad48.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\n\r\nclass Header extends React.Component {\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <header className=\"megaboard container-fluid px-0\">\r\n                <div className=\"row w-100 mx-0\">\r\n                    <p className=\"d-sm-none px-0 col-sm-6 mw-100 col-lg-4 col-xl-3 m-0\"><img src=\"https://i.imgur.com/ayXf4pz.jpg\"\r\n                        className=\"w-75 mw-100\" alt=\"Thomas Pollard\" height=\"auto\" /></p>\r\n                    <p className=\"d-none d-sm-block px-0 col-sm-6 mw-100 col-lg-4 col-xl-3 m-0\"><img src=\"https://i.imgur.com/ayXf4pz.jpg\"\r\n                        className=\"w-100 mw-100\" alt=\"Thomas Pollard\" height=\"auto\" /></p>\r\n                    <div className=\"col-sm-6 col-lg-8 col-xl-9 mx-0 content-center\">\r\n                        <h1 className=\"text-center px-1\">Thomas Pollard's portfolio</h1>\r\n                        <h4 className=\"px-1 \">Computer Science undergraduate from Portland State University</h4>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\n\r\nclass Navbar extends React.Component {\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <nav className=\"container-fluid p-0 pr-sm-2 pl-sm-2 sticky-top border border-dark\">\r\n                <ul className=\"row m-0 p-0\">\r\n                    <a className=\"col-sm\" href=\"/\"><li>Home</li></a>\r\n                    <a className=\"col-sm\" href=\"/#/projects\"><li>Projects</li></a>\r\n                    <a className=\"col-sm\" href=\"/#/contact\"><li>Contact</li></a>\r\n                </ul>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Navbar;\r\n","import Phaser from \"phaser\";\r\nclass SelectedStack {\r\n    constructor(scene) {\r\n        this.scene = scene;\r\n        this.currentRow = null;\r\n        this.currentColumn = null;\r\n        this.currentColor = null;\r\n        this.stack = [];\r\n        this.loop = false;\r\n        this.path = null;\r\n        this.lines = [];\r\n        this.graphics = this.scene.add.graphics();\r\n    }\r\n\r\n    selectDot(dot) {\r\n        let last = this.stack[this.stack.length - 1];\r\n        let penultimate = this.stack[this.stack.length - 2];\r\n        if (this.stack.length == 0) { // Empty stack\r\n            this.stack.push(dot);\r\n            this.currentColor = dot.color;\r\n            this.currentColumn = dot.column;\r\n            this.currentRow = dot.row;\r\n        }\r\n        else if (this.scene.AreAdjacent(last, dot)) {\r\n            if (this.stack.indexOf(dot) < 0) { // New dot\r\n                if (!this.loop && dot.fillColor == last.fillColor) {\r\n                    // console.log(\"Pushed onto stack\")\r\n                    this.stack.push(dot)\r\n                }\r\n            }\r\n            else if (this.stack.length > 1) {\r\n                if (dot === penultimate) {\r\n                    this.stack.pop();\r\n                    this.loop = false;\r\n                    console.log(\"Loop is now false\");\r\n                }\r\n                else if (this.stack.length > 2) {\r\n                    if ((!this.loop) && dot === this.stack[0]) { // reached the first again\r\n                        this.stack.push(dot);\r\n                        this.loop = true;\r\n                        console.log(\"Loop is now true\");\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n\r\n                // console.log(\"Already on stack\")\r\n            }\r\n        }\r\n        // console.log(this.stack)\r\n    }\r\n\r\n    scoreStack() {\r\n        // console.log(this.selectedStack.stack)\r\n        if (this.loop) {\r\n            this.stack.pop()\r\n        }\r\n        let score = {};\r\n        score.points = this.stack.length;\r\n        score.loop = this.loop;\r\n        this.loop = false;\r\n        if (this.stack.length > 1) {\r\n            while (this.stack.length > 0) {\r\n                let current = this.stack.pop();\r\n                // console.log(current);\r\n                current.popDot()\r\n            }\r\n        }\r\n        else {\r\n            score.points = 0;\r\n            this.stack = [];\r\n        }\r\n        return score;\r\n        // FillEmptyHexagons(gameScene.gameboard);\r\n    }\r\n\r\n    updateLine() {\r\n        this.graphics.clear();\r\n        if (this.stack.length > 0) {\r\n            let lastDot = this.stack[this.stack.length - 1];\r\n            let pointer = this.scene.input.activePointer\r\n            this.graphics.depth = 2;\r\n            this.graphics.lineStyle(5, lastDot.color);\r\n            //if (this.lineToPointer == null) {\r\n            //    this.lineToPointer = this.scene.add.line(\r\n            //        lastDot.x,\r\n            //        lastDot.y,\r\n            //        0,\r\n            //        0,\r\n            //        pointer.x,\r\n            //        pointer.y,\r\n            //        lastDot.color,\r\n            //    );\r\n            //    this.lineToPointer.isFilled = true;\r\n            //}\r\n            //else {\r\n            //    this.lineToPointer.strokeColor = lastDot.color\r\n            //    this.lineToPointer.x = lastDot.x;\r\n            //    this.lineToPointer.y = lastDot.y;\r\n            //    this.lineToPointer.x1 = pointer.x;\r\n            //    this.lineToPointer.y1 = pointer.y;\r\n            //}\r\n            this.path = new Phaser.Curves.Path(this.stack[0].x, this.stack[0].y);\r\n            for (let i = 1; i < this.stack.length; i++) {\r\n                this.path.lineTo(this.stack[i].x, this.stack[i].y);\r\n            }\r\n            if (!this.loop) {\r\n                this.path.lineTo(this.scene.input.activePointer.x, this.scene.input.activePointer.y);\r\n            }\r\n            this.path.draw(this.graphics, 128);\r\n\r\n        }\r\n    }\r\n}\r\nexport default SelectedStack","import Phaser from \"phaser\";\r\nclass Dot extends Phaser.GameObjects.Arc {\r\n\t\r\n\tconstructor(scene, x, y, radius, color, row, column) {\r\n\t\tsuper(scene, x, y, radius, 0, 360, false, color, 1);\r\n\t\tthis.targetX = x;\r\n\t\tthis.targetY = y;\r\n\t\tthis.row = row;\r\n\t\tthis.column = column;\r\n\t\tthis.color = color;\r\n\t\tthis.setInteractive()\r\n\t\tthis.on('pointerover', function (pointer) {\r\n\t\t\t// console.log(\"hovered\");\r\n\t\t\tif (scene.input.activePointer.isDown) {\r\n\t\t\t\t// console.log('Pointer over')\r\n\t\t\t\tscene.selectedStack.selectDot(this)\r\n\t\t\t}\r\n\t\t});\r\n\t\tthis.on('pointerdown', function (pointer) {\r\n\t\t\t// console.log('Pointer down')\r\n\t\t\tscene.selectedStack.selectDot(this);\r\n\t\t});\r\n\t\tthis.scale = 0;\r\n\t\tthis.scene.tweens.add({\r\n\t\t\ttargets: this,\r\n\t\t\tscale: 1,\r\n\t\t\tduration: 500,\r\n\t\t\tease: 'Bounce.out',\r\n\t\t\tdelay: 250 + this.row * 100\r\n\t\t});\r\n\t\tscene.add.existing(this)\r\n\t}\r\n\t\r\n\tpopDot()\r\n\t{\r\n\t\tthis.particles = this.scene.add.particles('dust');\r\n\t\tthis.emitter = this.particles.createEmitter();\r\n\t\tthis.emitter.setPosition(this.x,this.y);\r\n\t\tthis.emitter.setSpeed({min:20, max: 100});\r\n\t\tthis.emitter.setBlendMode(Phaser.BlendModes.NORMAL);\r\n\t\tthis.emitter.setFrequency(-1, 6);\r\n\t\tthis.emitter.setLifespan({ min: 100, max: 300 });\r\n\t\tthis.emitter.setScale({min:0.15, max: 0.3})\r\n\t\tthis.emitter.setGravity(0,500);\r\n\t\tthis.emitter.explode()\r\n\t\t//this.emitter.acceleration);\r\n\t\tthis.scene.gameboard[this.row][this.column].dot = null;\r\n\t\tthis.destroy();\r\n\t}\r\n\r\n\tfall(newRow, points) {\r\n\t\tthis.path = new Phaser.Curves.Path(this.x, this.y)\r\n\t\tlet timeline = this.scene.tweens.createTimeline();\r\n\t\tfor (let i = this.row; i <= newRow; i++) {\r\n\t\t\ttimeline.add({\r\n\t\t\t\ttargets: this,\r\n\t\t\t\tx: points[this.column][i].x,\r\n\t\t\t\ty: points[this.column][i].y,\r\n\t\t\t\tease: 'Bounce.out',\r\n\t\t\t\tduration: 100\r\n\t\t\t});\r\n\t\t}\r\n\t\ttimeline.play();\r\n\t\tthis.row = newRow;\r\n\t\tthis.depth = 1;\r\n\t}\r\n\r\n\tupdate() {\r\n\t}\r\n}\r\nexport default Dot","import Phaser from 'phaser';\r\nimport SelectedStack from '../classes/SelectedStack'\r\nimport Dot from '../classes/Dot'\r\n// import dust from '.public/assets/dust.png';\r\nclass GameScene extends Phaser.Scene{\r\n\r\n    constructor(game, boardSize, colorCount, hexWidth, hexHeight, showHexes) {\r\n        super(game);\r\n        this.colorList = [0x0, 0xf2f200, 0xdd2222, 0x33aa33, 0x3333aa, 0xffaaaa, 0x33ffff]\r\n        this.colorCount = Math.min(colorCount, this.colorList.length);\r\n        this.boardsize = Math.min(boardSize, 11);\r\n        this.hexWidth = hexWidth;\r\n        this.hexHeight = hexHeight;\r\n        this.showHexes = showHexes;\r\n        this.score = 0;\r\n    }\r\n    \r\n    RandomColor(colorCount) {\r\n        let colorIndex\r\n        do\r\n        {\r\n            colorIndex = (Math.floor(Math.random() * colorCount))\r\n\r\n        } while (colorIndex >= this.colorList.length)\r\n        let color = this.colorList[colorIndex % (this.colorList.length)]\r\n        return color\r\n    }\r\n\r\n    AreAdjacent(dot1, dot2) {\r\n        if (dot1.row == dot2.row) {\r\n            if (Math.abs(dot1.column - dot2.column) == 1) {\r\n                return true;\r\n            }\r\n        }\r\n        else if (Math.abs(dot1.row - dot2.row) == 1) {\r\n            // One row above or below\r\n            // If dot1.row is even, check if dot2.column is the same or -1\r\n            // If dot1.row is odd, check if dot2.column is the same or +1\r\n            if (dot1.column == dot2.column || dot2.column == (dot1.column - 1) + 2*((dot1.row) % 2)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    preload()\r\n    {\r\n        this.load.html('gameConfigForm', 'assets/text/configForm.html');\r\n        this.load.image('dust', 'assets/dust.png');\r\n        this.load.image('hexagon', 'assets/Hexagon.png');\r\n    }\r\n\r\n    create()\r\n    {\r\n        this.scoreText = this.add.text(16, 16, \"Score: 0\", { fontSize: '32px', fill: '#000' });\r\n        let thisScene = this;\r\n        this.selectedStack = new SelectedStack(this);\r\n        this.clearColor = function (gameboard, color) {\r\n            let score = 0;\r\n            for (let i in gameboard) {\r\n                let row = gameboard[i];\r\n                for (let j in row) {\r\n                    let dot = row[j].dot;\r\n                    if (dot && dot.color === color) {\r\n                        dot.popDot();\r\n                        score += 1;\r\n                    }\r\n                }\r\n            }\r\n            return score;\r\n        }\r\n        this.boardoffsetX = (this.sys.game.config.width / 2) - ((this.hexWidth * this.boardsize ) / 2);\r\n        this.boardoffsetY = (this.sys.game.config.height / 2) - (this.hexHeight*2/3 * (this.boardsize-1)/2);\r\n        this.input.on('pointerup', function (pointer) {\r\n            // function to clear selected and give points\r\n            let score = thisScene.selectedStack.scoreStack();\r\n            thisScene.score += score.points**2;\r\n            if (score.loop) {\r\n                var loopScore = thisScene.clearColor(thisScene.gameboard, thisScene.selectedStack.currentColor);\r\n                thisScene.score += loopScore;\r\n            }\r\n            thisScene.scoreText.setText(`Score: ${thisScene.score}`);\r\n            thisScene.fallDots();\r\n            thisScene.refillDots();\r\n            console.log(score.points**2, loopScore)\r\n        });\r\n        this.gameboard = [];\r\n        for (let i = 0; i < this.boardsize; i++)\r\n        {\r\n            let gamerow = [];\r\n            for (let j = 0; j < this.boardsize; j++)\r\n            {\r\n                let color = this.RandomColor(this.colorCount)\r\n                let dot = new Dot(this, (j*this.hexWidth) + (i % 2 * (this.hexWidth / 2)) + this.boardoffsetX, (i * (2 * this.hexHeight / 3)) + this.boardoffsetY, 15, color, i, j).setInteractive();\r\n                gamerow[j] = {};\r\n                gamerow[j].dot = dot;\r\n                gamerow[j].positionX = (j * this.hexWidth) + (i % 2 * (this.hexWidth / 2)) + this.boardoffsetX;\r\n                gamerow[j].positionY = (i * (2 * this.hexHeight / 3)) + this.boardoffsetY;\r\n                if (this.showHexes)\r\n                {\r\n                    gamerow[j].hex = this.add.image(gamerow[j].positionX, gamerow[j].positionY, 'hexagon');\r\n                    gamerow[j].hex.alpha = 0.03;\r\n                }\r\n            }\r\n\r\n            this.gameboard[i] = gamerow;\r\n        }\r\n        this.columnPoints = [];\r\n\r\n        let graphics = this.add.graphics();\r\n        graphics.depth = -1;\r\n        graphics.lineStyle(1, 0x333333, 1);\r\n        for (let c = 0; c < this.boardsize; c++) {\r\n            let path = new Phaser.Curves.Path(this.gameboard[0][c].positionX, this.gameboard[0][c].positionY);\r\n            let columnPoints = [];\r\n            for (let r = 0; r < this.boardsize; r++) {\r\n                let columnPoint = {};\r\n                columnPoint.x = this.gameboard[r][c].positionX;\r\n                columnPoint.y = this.gameboard[r][c].positionY;\r\n                path.lineTo(columnPoint.x, columnPoint.y);\r\n                columnPoints[r] = columnPoint;\r\n            }\r\n            this.columnPoints[c] = columnPoints;\r\n\r\n            path.draw(graphics, 128);\r\n        }\r\n    }\r\n\r\n    update() {\r\n        this.selectedStack.updateLine();\r\n    \r\n    }\r\n    \r\n    fallDots() {\r\n        let gameboard = this.gameboard;\r\n        for (let i = this.boardsize - 1; i >= 0; i--) {\r\n            let row = gameboard[i];\r\n            for (let j = this.boardsize - 1; j >= 0; j--) {\r\n                let dot = row[j].dot;\r\n                // Start at row above me\r\n                // Check if dot is in the same column\r\n                // If it is, 'steal'\r\n                let victimRow = i - 1;\r\n                while (dot == null && victimRow >= 0)\r\n                {\r\n                    let victimDot = gameboard[victimRow][j].dot;\r\n                    gameboard[victimRow][j].dot = null;\r\n                    if (victimDot != null) {\r\n                        dot = victimDot;\r\n                        let y = (i * (2 * this.hexHeight / 3)) + this.boardoffsetY;\r\n                        let x = (j * this.hexWidth) + (i % 2 * (this.hexWidth / 2)) + this.boardoffsetX;\r\n                        dot.fall(i, this.columnPoints)\r\n                        row[j].dot = dot;\r\n                    }\r\n                    victimRow--;\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    refillDots() {\r\n        let gameboard = this.gameboard;\r\n        for (let i = this.boardsize - 1; i >= 0; i--) {\r\n            let row = gameboard[i];\r\n            for (let j = this.boardsize - 1; j >= 0; j--) {\r\n                let dot = row[j].dot;\r\n                if (dot == null) {\r\n                    let color = this.RandomColor(this.colorCount)\r\n                    let dot = new Dot(this, (j * this.hexWidth) + (i % 2 * (this.hexWidth / 2)) + this.boardoffsetX, (i * (2 * this.hexHeight / 3)) + this.boardoffsetY, 15, color, i, j).setInteractive();\r\n                    row[j].dot = dot;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    select(x, y) {\r\n        this.selectedStack.stack.push(this.gameboard[x][y].dot);\r\n    }\r\n    \r\n    pop() {\r\n        this.selectedStack.stack.pop();\r\n    }\r\n\r\n    score() {\r\n        this.selectedStack.scoreStack();\r\n        this.refresh();\r\n    }\r\n\r\n    refresh() {\r\n        this.fallDots();\r\n        this.refillDots();\r\n    }\r\n}\r\nexport default GameScene","import React from \"react\";\r\nimport { Switch, HashRouter, Route, useRouteMatch, useParams, Link} from \"react-router-dom\";\r\nimport Phaser, { CANVAS } from 'phaser';\r\nimport GameScene from './Projects/HexDots/src/scenes/GameScene';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { findDOMNode } from \"react-dom\";\r\n//import './Projects/HexDots/src/classes'\r\nclass Projects extends React.Component {\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main-container grid\">\r\n                <div className=\"sidebar\">\r\n                    <h3>Projects</h3>\r\n                    <ul className=\"p-0 font-weight-bold\">\r\n                        <li className=\"subnav-item\">\r\n                            <Link className=\"text-dark\" to=\"/projects/HexDots\">Hex Dots</Link>\r\n                        </li>\r\n                        <li className=\"subnav-item\">\r\n                            <Link className=\"text-dark\" to=\"/projects/project2\">Project 2</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n                <main className=\"main-content\">\r\n                    <Switch>\r\n                        <Route path={`/projects`}>\r\n                            <ProjectList />\r\n                            <div id=\"projectContainer\"></div>\r\n                        </Route>\r\n\r\n                    </Switch>\r\n                </main>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction ProjectList() {\r\n    let match = useRouteMatch();\r\n    ClearProject();\r\n    return (\r\n        <Switch>\r\n            <Route path={`${match.path}/:projectId`}>\r\n                <Project />\r\n            </Route>\r\n        </Switch>\r\n    )\r\n}\r\n\r\nfunction ClearProject() {\r\n    let project = document.getElementById('projectContainer');\r\n    if (project)\r\n    {\r\n        let existing = project.children;\r\n        for (let children of existing)\r\n        {\r\n            children.remove();\r\n        }\r\n    }\r\n}\r\n\r\nfunction Project() {\r\n    let { projectId } = useParams();\r\n    switch (projectId)\r\n    {\r\n        case \"HexDots\":\r\n        {\r\n            \r\n            const urlParams = new URLSearchParams(window.location.search);\r\n            const boardSizeInput = urlParams.get('boardSize');\r\n            const colorCountInput = urlParams.get('colorCount');\r\n            \r\n            \r\n            var boardsize = 8;\r\n            var colorCount = 7;\r\n            const hexWidth = 62;\r\n            const hexHeight = 70;\r\n            const showHexes = true;\r\n\r\n            if (boardSizeInput)\r\n            {\r\n                boardsize = parseInt(boardSizeInput);\r\n            }\r\n            if (colorCountInput)\r\n            {\r\n                colorCount = parseInt(colorCountInput);\r\n            }\r\n    \r\n            let gameScene = new GameScene('Game', boardsize, colorCount, hexWidth, hexHeight, showHexes);\r\n    \r\n            var config = {\r\n                parent: 'projectContainer',\r\n                type: Phaser.AUTO,\r\n                width: 1000,\r\n                height: 600,\r\n                pixelArt: false,\r\n                border: true,\r\n                scene: [gameScene],\r\n                backgroundColor: '#fff'\r\n                };\r\n            \r\n            \r\n            var game = new Phaser.Game(config);\r\n            game.scene.start('Game');\r\n            return (\r\n                <div>\r\n                    <p>I created this game in Phaser 3. Click and drag adjacent dots to select them. Selecting 2 or more dots will clear them when you release the mouse button.</p>\r\n                    <p>Creating a loop (starting and ending on the same dot) will cause all dots of that color on the screen to be cleared.</p>\r\n                    <p>You get the number of dots selected, squared points when you clear, plus 1 point for each other dot cleared with a loop.</p>\r\n                    <form>\r\n                        <label htmlFor=\"boardSize\">Board Size (Max 11): </label>\r\n                        <input placeholder=\"Default: 8\" name=\"boardSize\" type=\"text\" id=\"tbBoardSize\" onChange={ClearProject()}/>\r\n                        <br />\r\n                        <label htmlFor=\"colorCount\">Colors (Max 7): </label>\r\n                        <input placeholder=\"Default: 7\" name=\"colorCount\" type=\"text\" id=\"tbColors\" />\r\n                        <input type=\"submit\" onClick={ClearProject()} value=\"Launch\"/>\r\n                    </form>\r\n                </div>\r\n            )\r\n        }\r\n        default:\r\n        {\r\n            return (\r\n                <h2>Show Project {projectId} here</h2>\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexport default Projects;\r\n","import React from \"react\";\r\nimport { Switch, HashRouter, Route, useRouteMatch } from \"react-router-dom\";\r\n\r\nclass Home extends React.Component {\r\n\r\n    componentDidMount() {\r\n        \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main-container container-fluid\">\r\n                <div className=\"row\">\r\n                    <div className=\"d-none d-sm-block col-sm-3 p-0 subnav\">\r\n                        <h3>My Links</h3>\r\n                        <a href=\"https://1drv.ms/b/s!Al2YMosquu6wiZNgDm8idWR_Slw-ow?e=Jr0zus\">Resume</a>\r\n                    </div>\r\n                    <div className=\"d-block d-sm-none col-sm-3 p-0 subnav\">\r\n                        <h3>My Links</h3>\r\n                        <a href=\"https://1drv.ms/b/s!Al2YMosquu6wiZNgDm8idWR_Slw-ow?e=Jr0zus\">Resume</a>\r\n                    </div>\r\n                    <div className=\"col-sm-9 p-0\">\r\n                        <h2>Hello, welcome to my portfolio website</h2>\r\n                        <p>This website is still a work in progress. Feel free to check out my resume or my github page <a href=\"https://github.com/tnp94\">here</a></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from \"./components/Header\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Projects from './components/Projects';\r\nimport Home from './components/Home';\r\nimport { Redirect, Route, HashRouter as Router , Switch } from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  const redirect = () => <Redirect to=\"/\" />;\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <link\r\n  rel=\"stylesheet\"\r\n  href=\"https://cdn.jsdelivr.net/npm/bootstrap@4.6.0/dist/css/bootstrap.min.css\"\r\n  integrity=\"sha384-B0vP5xmATw1+K9KRQjQERJvTumQW0nPEzvF6L/Z6nronJ3oUOFUFpCjEUQouq2+l\"\r\n  crossOrigin=\"anonymous\"/>\r\n      <Router basename={process.env.PUBLIC_URL}>\r\n        <Header />\r\n        <Navbar />\r\n        <Switch>\r\n          <Route component={Projects} path=\"/projects\" />\r\n          <Route component={Home} path=\"/\" />\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport './css/layout.css';\r\nimport './css/nav-layout.css';\r\nimport './css/normalize.css';\r\nimport './css/style.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}